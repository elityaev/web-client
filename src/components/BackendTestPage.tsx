import React, { useState, useEffect } from 'react';
import { useLiveKitStore } from '../stores/liveKitStore';
import { useOnboardingStore } from '../stores/onboardingStore';
import { useAuthStore } from '../stores/authStore';
import { Loader2, CheckCircle, Clock, AlertCircle, Play, Pause, RotateCcw } from 'lucide-react';

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
const TEST_SCENARIOS = {
    PREMIUM_WITH_ALL_PERMISSIONS: {
        name: 'Premium + –í—Å–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è',
        description: '–ü—Ä–µ–º–∏—É–º –∞–∫—Ç–∏–≤–µ–Ω, –≤—Å–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è (microphone, location, push, apple_music) –≤–∫–ª—é—á–µ–Ω—ã',
        premium: true,
        permissions: {
            microphone: true,
            location: true,
            push: true,
            apple_music: true
        }
    },
    PREMIUM_WITHOUT_MIC_LOCATION: {
        name: 'Premium –±–µ–∑ mic/location',
        description: '–ü—Ä–µ–º–∏—É–º –∞–∫—Ç–∏–≤–µ–Ω, –Ω–æ microphone –∏ location –æ—Ç–∫–ª—é—á–µ–Ω—ã (–Ω—É–∂–µ–Ω –∑–∞–ø—Ä–æ—Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π)',
        premium: true,
        permissions: {
            microphone: false,
            location: false,
            push: true,
            apple_music: true
        }
    }
};

interface TestStep {
    id: string;
    name: string;
    description: string;
    status: 'pending' | 'running' | 'passed' | 'failed';
    error?: string;
    expectedPayload?: any;
    actualPayload?: any;
}

interface TestSuite {
    id: string;
    name: string;
    description: string;
    steps: TestStep[];
    status: 'pending' | 'running' | 'passed' | 'failed';
}

export const BackendTestPage: React.FC = () => {
    const [isRunning, setIsRunning] = useState(false);
    const [currentTestSuite, setCurrentTestSuite] = useState<TestSuite | null>(null);
    const [testResults, setTestResults] = useState<TestSuite[]>([]);

    const {
        isConnected,
        isConnecting,
        connect,
        disconnect,
        connectionState
    } = useLiveKitStore();

    const {
        receivedRpcCommands,
        sentRpcCommands,
        permissions,
        setPermission,
        sendPermissionsResponse,
        error
    } = useOnboardingStore();

    const { premium, setPremium } = useAuthStore();

    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç-—Å—å—é—Ç –¥–ª—è –ø—Ä–µ–º–∏—É–º —Ñ–ª–æ—É
    const createPremiumFlowTestSuite = (): TestSuite => ({
        id: 'premium-flow',
        name: 'Premium Flow Test',
        description: `–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ñ–ª–æ—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π: ${TEST_SCENARIOS.PREMIUM_WITH_ALL_PERMISSIONS.name} (${TEST_SCENARIOS.PREMIUM_WITH_ALL_PERMISSIONS.description})`,
        status: 'pending',
        steps: [
            {
                id: 'connect',
                name: '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±—ç–∫–µ–Ω–¥—É',
                description: '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ LiveKit –∫–æ–º–Ω–∞—Ç–µ',
                status: 'pending'
            },
            {
                id: 'get-premium',
                name: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ–º–∏—É–º —Å—Ç–∞—Ç—É—Å–∞',
                description: '–ë—ç–∫–µ–Ω–¥ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç get-premium, –æ–∂–∏–¥–∞–µ—Ç—Å—è true',
                status: 'pending',
                expectedPayload: { premium: true }
            },
            {
                id: 'get-permissions',
                name: '–ó–∞–ø—Ä–æ—Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π',
                description: '–ë—ç–∫–µ–Ω–¥ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç get-permissions, –æ–∂–∏–¥–∞–µ—Ç—Å—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—Å–µ—Ö —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π',
                status: 'pending',
                expectedPayload: {
                    microphone: true,
                    location: true,
                    push: true,
                    apple_music: true
                }
            },
            {
                id: 'show-screen-main',
                name: '–ü–æ–∫–∞–∑ –≥–ª–∞–≤–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∞',
                description: '–ë—ç–∫–µ–Ω–¥ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç show-screen —Å main —ç–∫—Ä–∞–Ω–æ–º',
                status: 'pending',
                expectedPayload: {
                    screen_type: 'main',
                    use_microphone: true,
                    data: {
                        text: 'How can I help you?',
                        buttons: [
                            {
                                text: 'Navigate',
                                icon_url: 'https://cdn.ray-a.pl/va/main-navigation.svg',
                                rpc_on_click: { name: 'navigate' }
                            },
                            {
                                text: 'Play music',
                                icon_url: 'https://cdn.ray-a.pl/va/main-note.svg',
                                rpc_on_click: { name: 'music' }
                            }
                        ]
                    },
                    avatar_state: { input: 'Idle' },
                    analytics: { event: { name: 'Main Screen Open' } }
                }
            }
        ]
    });

    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç-—Å—å—é—Ç –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ (–º–∏–∫—Ä–æ—Ñ–æ–Ω/–ª–æ–∫–∞—Ü–∏—è = false)
    const createRequestPermissionsFlowTestSuite = (): TestSuite => ({
        id: 'request-permissions-flow',
        name: 'Request Permissions Flow Test',
        description: `–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ñ–ª–æ—É –∑–∞–ø—Ä–æ—Å–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π: ${TEST_SCENARIOS.PREMIUM_WITHOUT_MIC_LOCATION.name} (${TEST_SCENARIOS.PREMIUM_WITHOUT_MIC_LOCATION.description}). –ñ–¥–µ–º request_permissions —ç–∫—Ä–∞–Ω, —ç–º—É–ª–∏—Ä—É–µ–º Continue, –∑–∞—Ç–µ–º main screen`,
        status: 'pending',
        steps: [
            { id: 'connect', name: '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±—ç–∫–µ–Ω–¥—É', description: '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ LiveKit –∫–æ–º–Ω–∞—Ç–µ', status: 'pending' },
            { id: 'request-permissions-screen', name: '–≠–∫—Ä–∞–Ω –∑–∞–ø—Ä–æ—Å–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π', description: '–û–∂–∏–¥–∞–µ—Ç—Å—è show-screen: request_permissions —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º payload', status: 'pending' },
            { id: 'continue', name: '–≠–º—É–ª—è—Ü–∏—è –Ω–∞–∂–∞—Ç–∏—è Continue', description: '–í—ã–¥–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º rpc_on_allow', status: 'pending' },
            { id: 'show-screen-main', name: '–ü–æ–∫–∞–∑ –≥–ª–∞–≤–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∞', description: '–ü–æ—Å–ª–µ Continue –ø—Ä–∏—Ö–æ–¥–∏—Ç show-screen main', status: 'pending' }
        ]
    });

    const handleLogout = () => {
        disconnect();
        setTestResults([]);
        setCurrentTestSuite(null);
    };

    const resetTestSuite = (suite: TestSuite): TestSuite => ({
        ...suite,
        status: 'pending',
        steps: suite.steps.map(step => ({ ...step, status: 'pending', error: undefined, actualPayload: undefined }))
    });

    const updateTestStep = (suiteId: string, stepId: string, updates: Partial<TestStep>) => {
        setTestResults(prev => prev.map(suite => {
            if (suite.id === suiteId) {
                return {
                    ...suite,
                    steps: suite.steps.map(step =>
                        step.id === stepId ? { ...step, ...updates } : step
                    )
                };
            }
            return suite;
        }));

        if (currentTestSuite?.id === suiteId) {
            setCurrentTestSuite(prev => {
                if (!prev || prev.id !== suiteId) return prev;
                return {
                    ...prev,
                    steps: prev.steps.map(step =>
                        step.id === stepId ? { ...step, ...updates } : step
                    )
                };
            });
        }
    };

    const updateTestSuiteStatus = (suiteId: string, status: TestSuite['status']) => {
        setTestResults(prev => prev.map(suite =>
            suite.id === suiteId ? { ...suite, status } : suite
        ));

        if (currentTestSuite?.id === suiteId) {
            setCurrentTestSuite(prev => prev ? { ...prev, status } : null);
        }
    };

    const runTestSuite = async (suite: TestSuite, manageRunningFlag: boolean = true) => {
        console.log('üöÄ Starting test suite:', suite.name);
        console.log('üîç Current connection state:', isConnected);
        console.log('üîç Current running state:', isRunning);

        const resetSuite = resetTestSuite(suite);
        setCurrentTestSuite(resetSuite);
        setTestResults(prev => [resetSuite, ...prev.filter(s => s.id !== suite.id)]);

        if (manageRunningFlag) {
            setIsRunning(true);
        }
        updateTestSuiteStatus(suite.id, 'running');

        try {
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è –ø—Ä–µ–º–∏—É–º —Ñ–ª–æ—É
            console.log('üîß Setting test configuration:', TEST_SCENARIOS.PREMIUM_WITH_ALL_PERMISSIONS.name);
            useAuthStore.getState().setPremium(TEST_SCENARIOS.PREMIUM_WITH_ALL_PERMISSIONS.premium);
            useOnboardingStore.setState((state) => ({
                permissions: TEST_SCENARIOS.PREMIUM_WITH_ALL_PERMISSIONS.permissions
            }));

            // –®–∞–≥ 1: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            updateTestStep(suite.id, 'connect', { status: 'running' });

            // –í—Å–µ–≥–¥–∞ –æ—Ç–∫–ª—é—á–∞–µ–º—Å—è —Å–Ω–∞—á–∞–ª–∞, –µ—Å–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã
            const { isConnected: currentConnected } = useLiveKitStore.getState();
            if (currentConnected) {
                console.log('üîÑ Disconnecting before test...');
                await disconnect();
                // –ñ–¥–µ–º –æ—Ç–∫–ª—é—á–µ–Ω–∏—è
                await new Promise(resolve => setTimeout(resolve, 1000));
            }

            // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ RPC –∫–æ–º–∞–Ω–¥—ã –∏ –æ—à–∏–±–∫–∏
            console.log('üßπ Clearing previous RPC commands and errors...');
            const { clearReceivedRpcCommands, clearSentRpcCommands } = useOnboardingStore.getState();
            // –û—á–∏—â–∞–µ–º –º–∞—Å—Å–∏–≤—ã –∫–æ–º–∞–Ω–¥ –∏ –æ—à–∏–±–∫–∏
            useOnboardingStore.setState({
                receivedRpcCommands: [],
                sentRpcCommands: [],
                error: null
            });

            // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ RPC –∫–æ–º–∞–Ω–¥ –ü–ï–†–ï–î –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º
            console.log('üöÄ Starting RPC command watchers...');
            const premiumPromise = waitForRpcCommand('get-premium', 15000);
            const permissionsPromise = waitForRpcCommand('get-permissions', 15000);
            const showScreenPromise = waitForShowScreenCommand('main', 15000);

            try {
                console.log('üîÑ Connecting for test...');
                await connect('assistant-room', true);
                // –ñ–¥–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Å —Ç–∞–π–º–∞—É—Ç–æ–º
                await new Promise((resolve, reject) => {
                    const startTime = Date.now();
                    const timeout = 15000; // 15 —Å–µ–∫—É–Ω–¥

                    const checkConnection = () => {
                        const { isConnected: currentConnected } = useLiveKitStore.getState();
                        if (currentConnected) {
                            resolve(true);
                            return;
                        }

                        if (Date.now() - startTime > timeout) {
                            reject(new Error('Timeout: –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤ —Ç–µ—á–µ–Ω–∏–µ 15 —Å–µ–∫—É–Ω–¥'));
                            return;
                        }

                        setTimeout(checkConnection, 100);
                    };
                    checkConnection();
                });
            } catch (error) {
                updateTestStep(suite.id, 'connect', {
                    status: 'failed',
                    error: `–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: ${(error as Error).message}`
                });
                updateTestSuiteStatus(suite.id, 'failed');
                return;
            }

            updateTestStep(suite.id, 'connect', { status: 'passed' });

            // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–∏—Å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è RPC –æ—à–∏–±–æ–∫ —á–µ—Ä–µ–∑ polling
            let watcherStopped = false;
            const createRpcErrorWatcher = () => {
                return new Promise<never>((_, reject) => {
                    let checkCount = 0;
                    const checkError = () => {
                        if (watcherStopped) {
                            console.log('üõë [Premium Flow] RPC Error watcher stopped');
                            return;
                        }
                        const error = useOnboardingStore.getState().error;
                        checkCount++;
                        if (checkCount % 10 === 0) {
                            console.log(`üîç [Premium Flow] RPC Error watcher check #${checkCount}, error:`, error);
                        }
                        if (error) {
                            console.log('‚ùå [Premium Flow] RPC Error detected in watcher:', error);
                            reject(new Error(error));
                            return;
                        }
                        setTimeout(checkError, 100);
                    };
                    checkError();
                });
            };

            const rpcErrorWatcher = createRpcErrorWatcher();

            // –®–∞–≥ 2: –û–∂–∏–¥–∞–Ω–∏–µ get-premium
            updateTestStep(suite.id, 'get-premium', { status: 'running' });
            const premiumReceived = await Promise.race([
                premiumPromise,
                rpcErrorWatcher
            ]);
            if (premiumReceived) {
                updateTestStep(suite.id, 'get-premium', {
                    status: 'passed',
                    actualPayload: premiumReceived
                });
            } else {
                updateTestStep(suite.id, 'get-premium', {
                    status: 'failed',
                    error: 'Timeout: get-premium –Ω–µ –ø–æ–ª—É—á–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ 15 —Å–µ–∫—É–Ω–¥'
                });
                updateTestSuiteStatus(suite.id, 'failed');
                return;
            }

            // –®–∞–≥ 3: –û–∂–∏–¥–∞–Ω–∏–µ get-permissions
            updateTestStep(suite.id, 'get-permissions', { status: 'running' });
            const permissionsReceived = await Promise.race([
                permissionsPromise,
                rpcErrorWatcher
            ]);
            if (permissionsReceived) {
                updateTestStep(suite.id, 'get-permissions', {
                    status: 'passed',
                    actualPayload: permissionsReceived
                });
            } else {
                updateTestStep(suite.id, 'get-permissions', {
                    status: 'failed',
                    error: 'Timeout: get-permissions –Ω–µ –ø–æ–ª—É—á–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ 15 —Å–µ–∫—É–Ω–¥'
                });
                updateTestSuiteStatus(suite.id, 'failed');
                return;
            }

            // –®–∞–≥ 4: –û–∂–∏–¥–∞–Ω–∏–µ show-screen —Å main —ç–∫—Ä–∞–Ω–æ–º
            updateTestStep(suite.id, 'show-screen-main', { status: 'running' });
            const showScreenReceived = await Promise.race([
                showScreenPromise,
                rpcErrorWatcher
            ]);
            if (showScreenReceived) {
                updateTestStep(suite.id, 'show-screen-main', {
                    status: 'passed',
                    actualPayload: showScreenReceived
                });
            } else {
                updateTestStep(suite.id, 'show-screen-main', {
                    status: 'failed',
                    error: 'Timeout: show-screen —Å main —ç–∫—Ä–∞–Ω–æ–º –Ω–µ –ø–æ–ª—É—á–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ 15 —Å–µ–∫—É–Ω–¥'
                });
                updateTestSuiteStatus(suite.id, 'failed');
                return;
            }

            updateTestSuiteStatus(suite.id, 'passed');

        } catch (error) {
            console.error('Test suite failed:', error);
            updateTestSuiteStatus(suite.id, 'failed');
        } finally {
            // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º watcher
            watcherStopped = true;

            // –û—Ç–∫–ª—é—á–∞–µ–º—Å—è –≤ –∫–æ–Ω—Ü–µ —Ç–µ—Å—Ç–∞
            try {
                console.log('üîÑ Disconnecting after test...');
                await disconnect();
            } catch (disconnectError) {
                console.warn('‚ö†Ô∏è Error during disconnect:', disconnectError);
            }
            if (manageRunningFlag) {
                setIsRunning(false);
            }
        }
    };

    // –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ—è–≤–ª–µ–Ω–∏—è permission popup –¥–∞–Ω–Ω—ã—Ö –≤ —Å—Ç–æ—Ä–µ
    const waitForPermissionPopup = (timeout: number): Promise<any> => {
        return new Promise((resolve) => {
            const startTime = Date.now();

            const check = () => {
                const popup = useOnboardingStore.getState().permissionPopupData;
                if (popup) {
                    resolve(popup);
                    return;
                }

                if (Date.now() - startTime > timeout) {
                    resolve(null);
                    return;
                }
                setTimeout(check, 100);
            };
            check();
        });
    };

    // –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ —Ñ–ª–æ—É –∑–∞–ø—Ä–æ—Å–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
    const runAllTests = async () => {
        console.log('üöÄ Starting all tests sequentially...');
        setIsRunning(true);

        const allTestSuites = [
            createPremiumFlowTestSuite(),
            createRequestPermissionsFlowTestSuite()
        ];

        try {
            for (let i = 0; i < allTestSuites.length; i++) {
                const suite = allTestSuites[i];
                console.log(`üìã Running test ${i + 1}/${allTestSuites.length}: ${suite.name}`);

                try {
                    if (suite.id === 'premium-flow') {
                        await runTestSuite(suite, false);
                    } else if (suite.id === 'request-permissions-flow') {
                        await runRequestPermissionsFlow(suite, false);
                    }

                    // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
                    if (i < allTestSuites.length - 1) {
                        console.log('‚è≥ Waiting 2 seconds before next test...');
                        await new Promise(resolve => setTimeout(resolve, 2000));
                    }
                } catch (error) {
                    console.error(`‚ùå Test ${suite.name} failed:`, error);
                    // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
                }
            }

            console.log('‚úÖ All tests completed');
        } finally {
            setIsRunning(false);
        }
    };

    const runRequestPermissionsFlow = async (suite: TestSuite, manageRunningFlag: boolean = true) => {
        console.log('üöÄ Starting test suite:', suite.name);

        const resetSuite = resetTestSuite(suite);
        setCurrentTestSuite(resetSuite);
        setTestResults(prev => [resetSuite, ...prev.filter(s => s.id !== suite.id)]);

        if (manageRunningFlag) {
            setIsRunning(true);
        }
        updateTestSuiteStatus(suite.id, 'running');

        try {
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è —Ç–µ—Å—Ç–∞ –∑–∞–ø—Ä–æ—Å–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
            console.log('üîß Setting test configuration:', TEST_SCENARIOS.PREMIUM_WITHOUT_MIC_LOCATION.name);
            useAuthStore.getState().setPremium(TEST_SCENARIOS.PREMIUM_WITHOUT_MIC_LOCATION.premium);
            useOnboardingStore.setState((state) => ({
                permissions: TEST_SCENARIOS.PREMIUM_WITHOUT_MIC_LOCATION.permissions
            }));

            // –®–∞–≥ 1: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            updateTestStep(suite.id, 'connect', { status: 'running' });

            const { isConnected: alreadyConnected } = useLiveKitStore.getState();
            if (alreadyConnected) {
                await disconnect();
                await new Promise(r => setTimeout(r, 800));
            }

            // –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ RPC –∏ –æ—à–∏–±–æ–∫
            useOnboardingStore.setState({ receivedRpcCommands: [], sentRpcCommands: [], error: null });

            // –í–æ—Ç—á–µ—Ä—ã
            const requestPermissionsScreenPromise = waitForShowScreenCommand('request_permissions', 20000);
            const mainScreenPromise = waitForShowScreenCommand('main', 20000);

            // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è
            await connect('assistant-room', true);
            await new Promise((resolve, reject) => {
                const start = Date.now();
                const timeout = 15000;
                const tick = () => {
                    if (useLiveKitStore.getState().isConnected) return resolve(true);
                    if (Date.now() - start > timeout) return reject(new Error('Timeout: –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ'));
                    setTimeout(tick, 100);
                };
                tick();
            });
            updateTestStep(suite.id, 'connect', { status: 'passed' });

            // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–∏—Å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è RPC –æ—à–∏–±–æ–∫ —á–µ—Ä–µ–∑ polling
            let watcherStopped = false;
            const createRpcErrorWatcher = () => {
                return new Promise<never>((_, reject) => {
                    let checkCount = 0;
                    const checkError = () => {
                        if (watcherStopped) {
                            console.log('üõë [Request Permissions Flow] RPC Error watcher stopped');
                            return;
                        }
                        const error = useOnboardingStore.getState().error;
                        checkCount++;
                        if (checkCount % 10 === 0) {
                            console.log(`üîç [Request Permissions Flow] RPC Error watcher check #${checkCount}, error:`, error);
                        }
                        if (error) {
                            console.log('‚ùå [Request Permissions Flow] RPC Error detected in watcher:', error);
                            reject(new Error(error));
                            return;
                        }
                        setTimeout(checkError, 100);
                    };
                    checkError();
                });
            };

            const rpcErrorWatcher = createRpcErrorWatcher();

            // –ñ–¥–µ–º —ç–∫—Ä–∞–Ω–∞ –∑–∞–ø—Ä–æ—Å–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π (show-screen: request_permissions)
            updateTestStep(suite.id, 'request-permissions-screen', { status: 'running' });
            const requestPermissionsScreen = await Promise.race([
                requestPermissionsScreenPromise,
                rpcErrorWatcher
            ]);
            if (!requestPermissionsScreen) {
                updateTestStep(suite.id, 'request-permissions-screen', { status: 'failed', error: 'Timeout: show-screen request_permissions –Ω–µ –ø–æ–ª—É—á–µ–Ω' });
                updateTestSuiteStatus(suite.id, 'failed');
                return;
            }

            // –í–∞–ª–∏–¥–∞—Ü–∏—è payload
            const validateRequestPermissionsPayload = (p: any): { ok: boolean; error?: string } => {
                if (p.screen_type !== 'request_permissions') return { ok: false, error: "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π screen_type" };
                if (p.use_microphone !== false) return { ok: false, error: "use_microphone –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å false" };
                if (!p.data || !Array.isArray(p.data.permissions)) return { ok: false, error: "–ù–µ—Ç –º–∞—Å—Å–∏–≤–∞ data.permissions" };
                const types = p.data.permissions.map((x: any) => x.type).sort();
                const hasMic = p.data.permissions.find((x: any) => x.type === 'microphone');
                const hasLoc = p.data.permissions.find((x: any) => x.type === 'location');
                if (!hasMic || !hasLoc) return { ok: false, error: `–ù—É–∂–Ω—ã permissions: microphone –∏ location (–µ—Å—Ç—å: ${types.join(', ')})` };
                const checkAction = (perm: any) => perm?.rpc_on_allow?.name === 'permission-allow' && perm?.rpc_on_deny?.name === 'permission-deny';
                if (!checkAction(hasMic) || !checkAction(hasLoc)) return { ok: false, error: 'rpc_on_allow/deny –∏–º–µ—é—Ç –Ω–µ–≤–µ—Ä–Ω—ã–µ –∏–º–µ–Ω–∞' };
                const btn = p.data.buttons?.[0];
                if (!btn || btn.rpc_on_click?.name !== 'dispatcher') return { ok: false, error: '–ö–Ω–æ–ø–∫–∞ Continue –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ rpc_on_click.name != dispatcher' };
                return { ok: true };
            };

            const validation = validateRequestPermissionsPayload(requestPermissionsScreen);
            if (!validation.ok) {
                updateTestStep(suite.id, 'request-permissions-screen', { status: 'failed', error: `–ù–µ–≤–µ—Ä–Ω—ã–π payload: ${validation.error}` });
                updateTestSuiteStatus(suite.id, 'failed');
                return;
            }
            updateTestStep(suite.id, 'request-permissions-screen', { status: 'passed', actualPayload: requestPermissionsScreen });

            // –≠–º—É–ª–∏—Ä—É–µ–º –Ω–∞–∂–∞—Ç–∏–µ Continue
            updateTestStep(suite.id, 'continue', { status: 'running' });
            try {
                // –í–∫–ª—é—á–∞–µ–º –≤—Å–µ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º rpc_on_click dispatcher
                const screen = requestPermissionsScreen;
                const perms = screen.data?.permissions || [];
                for (const perm of perms) {
                    const t = perm.type as 'microphone' | 'location' | 'push' | 'apple_music';
                    if (t === 'microphone' || t === 'location' || t === 'push' || t === 'apple_music') {
                        await useOnboardingStore.getState().setPermission(t, true);
                    }
                }
                const continueAction = screen.data?.buttons?.[0]?.rpc_on_click;
                if (continueAction) {
                    try {
                        await useOnboardingStore.getState().handleRpcMethod(continueAction.name, continueAction.payload || null);
                    } catch (rpcError) {
                        console.error('‚ùå RPC Error during Continue:', rpcError);
                        throw new Error(`RPC Error: ${(rpcError as Error).message}`);
                    }
                }
                updateTestStep(suite.id, 'continue', { status: 'passed' });
            } catch (e) {
                updateTestStep(suite.id, 'continue', { status: 'failed', error: `–û—à–∏–±–∫–∞ —ç–º—É–ª—è—Ü–∏–∏ Continue: ${(e as Error).message}` });
                updateTestSuiteStatus(suite.id, 'failed');
                return;
            }

            // –ñ–¥–µ–º –≥–ª–∞–≤–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∞
            updateTestStep(suite.id, 'show-screen-main', { status: 'running' });
            const mainScreen = await Promise.race([
                mainScreenPromise,
                rpcErrorWatcher
            ]);
            if (!mainScreen) {
                updateTestStep(suite.id, 'show-screen-main', { status: 'failed', error: 'Timeout: main screen –Ω–µ –ø–æ–ª—É—á–µ–Ω' });
                updateTestSuiteStatus(suite.id, 'failed');
                return;
            }
            updateTestStep(suite.id, 'show-screen-main', { status: 'passed', actualPayload: mainScreen });

            updateTestSuiteStatus(suite.id, 'passed');
        } catch (error) {
            console.error('Test suite failed:', error);
            updateTestSuiteStatus(suite.id, 'failed');
        } finally {
            // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º watcher
            watcherStopped = true;

            try { await disconnect(); } catch { }
            if (manageRunningFlag) {
                setIsRunning(false);
            }
        }
    };

    const waitForRpcCommand = (method: string, timeout: number): Promise<any> => {
        return new Promise((resolve) => {
            const startTime = Date.now();
            console.log(`üîç Waiting for RPC command: ${method}`);

            const checkCommand = () => {
                // –ß–∏—Ç–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞–ø—Ä—è–º—É—é –∏–∑ store
                const currentCommands = useOnboardingStore.getState().receivedRpcCommands;
                const command = currentCommands.find(cmd => cmd.method === method);
                console.log(`üîç Current RPC commands array length:`, currentCommands.length);
                console.log(`üîç Current RPC commands:`, currentCommands.map(cmd => `${cmd.method} at ${cmd.timestamp.toLocaleTimeString()}`));
                console.log(`üîç Looking for method: ${method}`);

                if (command) {
                    console.log(`‚úÖ Found RPC command: ${method}`, command.data);
                    resolve(command.data);
                    return;
                }

                const elapsed = Date.now() - startTime;
                if (elapsed > timeout) {
                    console.log(`‚ùå Timeout waiting for RPC command: ${method} (${elapsed}ms)`);
                    resolve(null);
                    return;
                }

                setTimeout(checkCommand, 100);
            };

            checkCommand();
        });
    };

    const waitForShowScreenCommand = (screenType: string, timeout: number): Promise<any> => {
        return new Promise((resolve) => {
            const startTime = Date.now();
            console.log(`üîç Waiting for show-screen command: ${screenType}`);

            const checkCommand = () => {
                // –ß–∏—Ç–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞–ø—Ä—è–º—É—é –∏–∑ store
                const currentCommands = useOnboardingStore.getState().receivedRpcCommands;
                const command = currentCommands.find(cmd =>
                    cmd.method === 'show-screen' && cmd.data?.screen_type === screenType
                );
                console.log(`üîç Current RPC commands:`, currentCommands.map(cmd =>
                    `${cmd.method} (${cmd.data?.screen_type || 'no screen_type'}) at ${cmd.timestamp.toLocaleTimeString()}`
                ));

                if (command) {
                    console.log(`‚úÖ Found show-screen command: ${screenType}`, command.data);
                    resolve(command.data);
                    return;
                }

                const elapsed = Date.now() - startTime;
                if (elapsed > timeout) {
                    console.log(`‚ùå Timeout waiting for show-screen command: ${screenType} (${elapsed}ms)`);
                    resolve(null);
                    return;
                }

                setTimeout(checkCommand, 100);
            };

            checkCommand();
        });
    };

    const getStatusIcon = (status: string) => {
        switch (status) {
            case 'passed': return <CheckCircle className="w-4 h-4 text-green-500" />;
            case 'failed': return <AlertCircle className="w-4 h-4 text-red-500" />;
            case 'running': return <Loader2 className="w-4 h-4 text-blue-500 animate-spin" />;
            default: return <Clock className="w-4 h-4 text-gray-400" />;
        }
    };

    const getStatusColor = (status: string) => {
        switch (status) {
            case 'passed': return 'text-green-600 bg-green-50 border-green-200';
            case 'failed': return 'text-red-600 bg-red-50 border-red-200';
            case 'running': return 'text-blue-600 bg-blue-50 border-blue-200';
            default: return 'text-gray-600 bg-gray-50 border-gray-200';
        }
    };


    return (
        <div className="min-h-screen bg-gray-100 p-8">
            <div className="max-w-6xl mx-auto">
                <div className="flex justify-between items-center mb-8">
                    <h1 className="text-3xl font-bold text-gray-900">–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±—ç–∫–µ–Ω–¥–∞</h1>
                    <button
                        onClick={handleLogout}
                        className="bg-red-600 hover:bg-red-700 text-white px-4 py-2 rounded-lg font-medium"
                    >
                        –í—ã–π—Ç–∏
                    </button>
                </div>

                {/* –°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è */}
                <div className="bg-white rounded-lg shadow-lg p-6 mb-6">
                    <h2 className="text-xl font-semibold mb-4">–°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è</h2>
                    <div className="flex items-center gap-4">
                        <div className={`px-3 py-1 rounded-full text-sm font-medium ${connectionState.status === 'connected'
                            ? 'bg-green-100 text-green-800'
                            : connectionState.status === 'connecting'
                                ? 'bg-yellow-100 text-yellow-800'
                                : 'bg-gray-100 text-gray-800'
                            }`}>
                            {connectionState.status === 'connected' && <CheckCircle className="inline w-4 h-4 mr-1" />}
                            {connectionState.status === 'connecting' && <Loader2 className="inline w-4 h-4 mr-1 animate-spin" />}
                            {connectionState.status === 'disconnected' && <AlertCircle className="inline w-4 h-4 mr-1" />}
                            {connectionState.status}
                        </div>
                        {connectionState.roomName && (
                            <span className="text-sm text-gray-600">–ö–æ–º–Ω–∞—Ç–∞: {connectionState.roomName}</span>
                        )}
                        {isRunning && (
                            <span className="text-sm text-blue-600 font-medium">
                                üîÑ –¢–µ—Å—Ç –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è...
                            </span>
                        )}
                    </div>
                </div>

                {/* –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤ */}
                <div className="bg-white rounded-lg shadow-lg p-6 mb-6">
                    <h2 className="text-xl font-semibold mb-4">–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤</h2>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                        <div className="border rounded-lg p-4">
                            <h3 className="text-lg font-semibold mb-2 text-blue-600">{TEST_SCENARIOS.PREMIUM_WITH_ALL_PERMISSIONS.name}</h3>
                            <p className="text-sm text-gray-600 mb-3">{TEST_SCENARIOS.PREMIUM_WITH_ALL_PERMISSIONS.description}</p>
                            <div className="space-y-1">
                                <div className="text-sm">
                                    <span className="font-medium">Premium:</span>
                                    <span className={`ml-2 px-2 py-1 rounded text-xs ${TEST_SCENARIOS.PREMIUM_WITH_ALL_PERMISSIONS.premium ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'}`}>
                                        {TEST_SCENARIOS.PREMIUM_WITH_ALL_PERMISSIONS.premium ? '–í–∫–ª—é—á–µ–Ω' : '–û—Ç–∫–ª—é—á–µ–Ω'}
                                    </span>
                                </div>
                                <div className="text-sm">
                                    <span className="font-medium">–†–∞–∑—Ä–µ—à–µ–Ω–∏—è:</span>
                                    <div className="ml-2 mt-1 space-y-1">
                                        {Object.entries(TEST_SCENARIOS.PREMIUM_WITH_ALL_PERMISSIONS.permissions).map(([key, value]) => (
                                            <div key={key} className="flex items-center gap-2">
                                                <span className="text-xs">{key}:</span>
                                                <span className={`px-2 py-1 rounded text-xs ${value ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'}`}>
                                                    {value ? '–í–∫–ª—é—á–µ–Ω–æ' : '–û—Ç–∫–ª—é—á–µ–Ω–æ'}
                                                </span>
                                            </div>
                                        ))}
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div className="border rounded-lg p-4">
                            <h3 className="text-lg font-semibold mb-2 text-purple-600">{TEST_SCENARIOS.PREMIUM_WITHOUT_MIC_LOCATION.name}</h3>
                            <p className="text-sm text-gray-600 mb-3">{TEST_SCENARIOS.PREMIUM_WITHOUT_MIC_LOCATION.description}</p>
                            <div className="space-y-1">
                                <div className="text-sm">
                                    <span className="font-medium">Premium:</span>
                                    <span className={`ml-2 px-2 py-1 rounded text-xs ${TEST_SCENARIOS.PREMIUM_WITHOUT_MIC_LOCATION.premium ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'}`}>
                                        {TEST_SCENARIOS.PREMIUM_WITHOUT_MIC_LOCATION.premium ? '–í–∫–ª—é—á–µ–Ω' : '–û—Ç–∫–ª—é—á–µ–Ω'}
                                    </span>
                                </div>
                                <div className="text-sm">
                                    <span className="font-medium">–†–∞–∑—Ä–µ—à–µ–Ω–∏—è:</span>
                                    <div className="ml-2 mt-1 space-y-1">
                                        {Object.entries(TEST_SCENARIOS.PREMIUM_WITHOUT_MIC_LOCATION.permissions).map(([key, value]) => (
                                            <div key={key} className="flex items-center gap-2">
                                                <span className="text-xs">{key}:</span>
                                                <span className={`px-2 py-1 rounded text-xs ${value ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'}`}>
                                                    {value ? '–í–∫–ª—é—á–µ–Ω–æ' : '–û—Ç–∫–ª—é—á–µ–Ω–æ'}
                                                </span>
                                            </div>
                                        ))}
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div className="mt-4 p-3 bg-blue-50 border border-blue-200 rounded-lg">
                        <p className="text-sm text-blue-800">
                            ‚ÑπÔ∏è –¢–µ—Å—Ç—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é—Ç –Ω—É–∂–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º. –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—ã—à–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.
                        </p>
                    </div>
                </div>

                {/* –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è */}
                <div className="bg-white rounded-lg shadow-lg p-6 mb-6">
                    <h2 className="text-xl font-semibold mb-4">–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è</h2>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                        <div>
                            <h3 className="text-lg font-semibold mb-3">–ü—Ä–µ–º–∏—É–º —Å—Ç–∞—Ç—É—Å</h3>
                            <div className="flex items-center gap-2">
                                <input
                                    type="checkbox"
                                    id="premium-status"
                                    checked={premium}
                                    onChange={(e) => setPremium(e.target.checked)}
                                    className="w-4 h-4 text-blue-600 bg-gray-100 border-gray-300 rounded focus:ring-blue-500"
                                />
                                <label htmlFor="premium-status" className="text-sm font-medium text-gray-900">
                                    Premium –∞–∫—Ç–∏–≤–µ–Ω
                                </label>
                            </div>
                        </div>
                        <div>
                            <h3 className="text-lg font-semibold mb-3">–†–∞–∑—Ä–µ—à–µ–Ω–∏—è</h3>
                            <div className="space-y-2">
                                {Object.entries(permissions).map(([key, value]) => (
                                    <div key={key} className="flex items-center gap-2">
                                        <input
                                            type="checkbox"
                                            id={key}
                                            checked={value}
                                            onChange={(e) => setPermission(key as any, e.target.checked)}
                                            className="w-4 h-4 text-blue-600 bg-gray-100 border-gray-300 rounded focus:ring-blue-500"
                                        />
                                        <label htmlFor={key} className="text-sm font-medium text-gray-900">
                                            {key}
                                        </label>
                                    </div>
                                ))}
                            </div>
                        </div>
                    </div>
                </div>

                {/* –ü–∞–Ω–µ–ª—å –æ—à–∏–±–æ–∫ RPC */}
                <div className="bg-white rounded-lg shadow-lg p-4 mb-6">
                    <h2 className="text-lg font-semibold mb-2">–°–æ—Å—Ç–æ—è–Ω–∏–µ RPC</h2>
                    {error ? (
                        <div className="flex items-start gap-2 text-red-700 bg-red-50 border border-red-200 rounded p-3">
                            <AlertCircle className="w-4 h-4 mt-0.5" />
                            <div className="text-sm">
                                <div className="font-medium">–û—à–∏–±–∫–∞ RPC:</div>
                                <div className="break-all">{error}</div>
                            </div>
                        </div>
                    ) : (
                        <div className="text-sm text-gray-600">–û—à–∏–±–æ–∫ RPC –Ω–µ—Ç</div>
                    )}
                </div>

                {/* –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞–º–∏ */}
                <div className="bg-white rounded-lg shadow-lg p-6 mb-6">
                    <h2 className="text-xl font-semibold mb-4">–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞–º–∏</h2>
                    <div className="flex gap-4">
                        <button
                            onClick={() => runTestSuite(createPremiumFlowTestSuite())}
                            disabled={isRunning}
                            className="bg-blue-600 hover:bg-blue-700 disabled:bg-blue-400 text-white px-6 py-2 rounded-lg font-medium flex items-center gap-2"
                        >
                            {isRunning ? <Loader2 className="w-4 h-4 animate-spin" /> : <Play className="w-4 h-4" />}
                            –ó–∞–ø—É—Å—Ç–∏—Ç—å Premium Flow Test
                        </button>
                        <button
                            onClick={() => runRequestPermissionsFlow(createRequestPermissionsFlowTestSuite())}
                            disabled={isRunning}
                            className="bg-purple-600 hover:bg-purple-700 disabled:bg-purple-400 text-white px-6 py-2 rounded-lg font-medium flex items-center gap-2"
                        >
                            {isRunning ? <Loader2 className="w-4 h-4 animate-spin" /> : <Play className="w-4 h-4" />}
                            –ó–∞–ø—É—Å—Ç–∏—Ç—å Request Permissions Flow
                        </button>
                        <button
                            onClick={runAllTests}
                            disabled={isRunning}
                            className="bg-green-600 hover:bg-green-700 disabled:bg-green-400 text-white px-6 py-2 rounded-lg font-medium flex items-center gap-2"
                        >
                            {isRunning ? <Loader2 className="w-4 h-4 animate-spin" /> : <Play className="w-4 h-4" />}
                            –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Ç–µ—Å—Ç—ã
                        </button>
                        <button
                            onClick={() => {
                                setTestResults([]);
                                setCurrentTestSuite(null);
                            }}
                            disabled={isRunning}
                            className="bg-gray-600 hover:bg-gray-700 disabled:bg-gray-400 text-white px-6 py-2 rounded-lg font-medium flex items-center gap-2"
                        >
                            <RotateCcw className="w-4 h-4" />
                            –û—á–∏—Å—Ç–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                        </button>
                    </div>
                    <div className="mt-4 p-3 bg-blue-50 border border-blue-200 rounded-lg">
                        <p className="text-sm text-blue-800">
                            ‚ÑπÔ∏è –¢–µ—Å—Ç—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥–∫–ª—é—á–∞—é—Ç—Å—è –∫ –±—ç–∫–µ–Ω–¥—É –≤ –Ω–∞—á–∞–ª–µ –∏ –æ—Ç–∫–ª—é—á–∞—é—Ç—Å—è –≤ –∫–æ–Ω—Ü–µ
                        </p>
                    </div>
                </div>

                {/* –¢–µ–∫—É—â–∏–π —Ç–µ—Å—Ç */}
                {currentTestSuite && (
                    <div className="bg-white rounded-lg shadow-lg p-6 mb-6">
                        <h2 className="text-xl font-semibold mb-4">–¢–µ–∫—É—â–∏–π —Ç–µ—Å—Ç: {currentTestSuite.name}</h2>
                        <p className="text-gray-600 mb-4">{currentTestSuite.description}</p>
                        <div className="space-y-3">
                            {currentTestSuite.steps.map((step) => (
                                <div
                                    key={step.id}
                                    className={`p-4 rounded-lg border ${getStatusColor(step.status)}`}
                                >
                                    <div className="flex items-center gap-3">
                                        {getStatusIcon(step.status)}
                                        <div className="flex-1">
                                            <h3 className="font-semibold">{step.name}</h3>
                                            <p className="text-sm opacity-75">{step.description}</p>
                                            {step.error && (
                                                <p className="text-sm text-red-600 mt-1">{step.error}</p>
                                            )}
                                        </div>
                                    </div>
                                </div>
                            ))}
                        </div>
                    </div>
                )}

                {/* –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤ */}
                {testResults.length > 0 && (
                    <div className="bg-white rounded-lg shadow-lg p-6">
                        <h2 className="text-xl font-semibold mb-4">–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤</h2>
                        <div className="space-y-4">
                            {testResults.map((suite) => (
                                <div key={suite.id} className="border rounded-lg p-4">
                                    <div className="flex items-center gap-3 mb-3">
                                        {getStatusIcon(suite.status)}
                                        <h3 className="font-semibold">{suite.name}</h3>
                                        <span className={`px-2 py-1 rounded text-xs font-medium ${suite.status === 'passed' ? 'bg-green-100 text-green-800' :
                                            suite.status === 'failed' ? 'bg-red-100 text-red-800' :
                                                suite.status === 'running' ? 'bg-blue-100 text-blue-800' :
                                                    'bg-gray-100 text-gray-800'
                                            }`}>
                                            {suite.status}
                                        </span>
                                    </div>
                                    <p className="text-sm text-gray-600 mb-3">{suite.description}</p>
                                    <div className="space-y-2">
                                        {suite.steps.map((step) => (
                                            <div
                                                key={step.id}
                                                className={`p-3 rounded border-l-4 ${step.status === 'passed' ? 'border-green-500 bg-green-50' :
                                                    step.status === 'failed' ? 'border-red-500 bg-red-50' :
                                                        step.status === 'running' ? 'border-blue-500 bg-blue-50' :
                                                            'border-gray-300 bg-gray-50'
                                                    }`}
                                            >
                                                <div className="flex items-center gap-2">
                                                    {getStatusIcon(step.status)}
                                                    <span className="font-medium text-sm">{step.name}</span>
                                                </div>
                                                {step.error && (
                                                    <p className="text-xs text-red-600 mt-1">{step.error}</p>
                                                )}
                                            </div>
                                        ))}
                                    </div>
                                </div>
                            ))}
                        </div>
                    </div>
                )}
            </div>
        </div>
    );
};

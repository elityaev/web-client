import { Room } from 'livekit-client';

interface PermissionButton {
  text: string;
  rpc_on_click: string;
}

interface PermissionRequestData {
  text: string;
  buttons: PermissionButton[];
  rpc_on_deny: string;
}

export interface OnboardingScreenData {
  screen_type: string;
  use_microphone: boolean;
  data?: PermissionRequestData;
  analytics?: any;
}

export interface RpcCommand {
  method: string;
  command_data?: any;
}

export class OnboardingService {
  private room: Room | null = null;
  private onScreenUpdate?: (screenData: OnboardingScreenData) => void;
  private onRpcCommand?: (command: RpcCommand) => void;

  setRoom(room: Room) {
    console.log('üîÑ Setting room in OnboardingService:', room);
    this.room = room;
    this.setupEventHandlers();
  }

  setOnScreenUpdate(callback: (screenData: OnboardingScreenData) => void) {
    console.log('üéØ Setting onScreenUpdate callback');
    this.onScreenUpdate = callback;
  }

  setOnRpcCommand(callback: (command: RpcCommand) => void) {
    console.log('üéØ Setting onRpcCommand callback');
    this.onRpcCommand = callback;
  }

  private setupEventHandlers() {
    if (!this.room) {
      console.error('‚ùå Cannot setup event handlers: room is null');
      return;
    }

    console.log('üîß Setting up event handlers for room:', this.room);

    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º RPC –º–µ—Ç–æ–¥ show-screen –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —ç–∫—Ä–∞–Ω–æ–≤ –æ—Ç –∞–≥–µ–Ω—Ç–∞
    this.room.localParticipant.registerRpcMethod('show-screen', async (data) => {
      try {
        console.log('üéØ Received show-screen RPC from agent:', data);

        // –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –æ—Ç –∞–≥–µ–Ω—Ç–∞
        let screenData;
        if (typeof data.payload === 'string') {
          screenData = JSON.parse(data.payload);
        } else {
          screenData = data.payload;
        }

        console.log('üì± Parsed screen data:', screenData);

        // –ü–µ—Ä–µ–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ —ç–∫—Ä–∞–Ω–∞ –≤ –∫–æ–ª–±—ç–∫
        if (this.onScreenUpdate) {
          console.log('‚úÖ Calling onScreenUpdate callback with data:', screenData);
          this.onScreenUpdate(screenData);
        } else {
          console.warn('‚ö†Ô∏è onScreenUpdate callback is not set');
        }

        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç –∞–≥–µ–Ω—Ç—É
        return JSON.stringify({ success: true });
      } catch (error) {
        console.error('‚ùå Error handling show-screen RPC:', error);
        return JSON.stringify({ success: false, error: (error as Error).message });
      }
    });

    // –ù–æ–≤—ã–π RPC –º–µ—Ç–æ–¥ request_permissions
    this.room.localParticipant.registerRpcMethod('request-permissions', async (data) => {
      try {
        let payload;
        if (typeof data.payload === 'string') {
          payload = JSON.parse(data.payload);
        } else {
          payload = data.payload;
        }
        // –ü–µ—Ä–µ–¥–∞—ë–º –≤ onScreenUpdate —ç–∫—Ä–∞–Ω —Å —Ç–∏–ø–æ–º 'request_permissions'
        this.onScreenUpdate?.({
          screen_type: 'request-permissions',
          use_microphone: false,
          data: payload,
        });
        return JSON.stringify({ success: true });
      } catch (error) {
        return JSON.stringify({ success: false, error: (error as Error).message });
      }
    });

    console.log('üîß RPC method "show-screen" registered successfully');

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö –æ—Ç –∞–≥–µ–Ω—Ç–∞ (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
    this.room.on('dataReceived', (payload: Uint8Array) => {
      try {
        const decoder = new TextDecoder();
        const text = decoder.decode(payload);
        const data = JSON.parse(text);

        console.log('üì° Received data from agent:', data);

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –∞–≥–µ–Ω—Ç–∞
        if (data.type === 'show_screen') {
          this.onScreenUpdate?.(data);
        } else if (data.type === 'rpc_command') {
          this.onRpcCommand?.(data);
        }
      } catch (error) {
        console.error('‚ùå Error parsing received data:', error);
      }
    });
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞
  async startOnboarding(): Promise<void> {
    if (!this.room?.localParticipant) {
      throw new Error('Room not connected');
    }

    try {
      console.log('Starting onboarding...');

      // –í—ã–∑—ã–≤–∞–µ–º RPC –º–µ—Ç–æ–¥ start_onboarding —É –∞–≥–µ–Ω—Ç–∞
      await this.room.localParticipant.performRpc({
        destinationIdentity: '', // –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ RPC –∏–¥–µ—Ç –∫ –∞–≥–µ–Ω—Ç—É
        method: 'start_onboarding',
        payload: JSON.stringify({}),
      });

      console.log('Onboarding started successfully');
    } catch (error) {
      console.error('Failed to start onboarding:', error);
      throw error;
    }
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
  async sendPermissionResult(permissionType: string, granted: boolean): Promise<void> {
    return this.sendRpcMethod('permission-result', {
      permission_type: permissionType,
      granted: granted
    });
  }

  // –ö–ª–∏–∫ "–†–∞–∑—Ä–µ—à–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –ª–æ–∫–∞—Ü–∏–∏"
  async sendLocationAllowClick(): Promise<void> {
    return this.sendRpcMethod('location-allow-click', {});
  }

  // –ö–ª–∏–∫ "–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–æ–∑–∂–µ"
  async sendLocationLaterClick(): Promise<void> {
    return this.sendRpcMethod('location-later-click', {});
  }

  // –ö–ª–∏–∫ "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å" —Å –º–µ—Å—Ç–æ–º
  async sendPlaceContinueClick(): Promise<void> {
    return this.sendRpcMethod('place-continue-click', {});
  }

  // –£—Å–ø–µ—à–Ω–∞—è –ø–æ–∫—É–ø–∫–∞
  async sendSuccessfulPurchase(): Promise<void> {
    return this.sendRpcMethod('successful-purchase', {});
  }

  // –ü—Ä–æ–ø—É—Å–∫ –ø–æ–∫—É–ø–∫–∏
  async sendPurchaseSkip(): Promise<void> {
    return this.sendRpcMethod('purchase-skip', {});
  }

  // –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  async sendPushAllowClick(): Promise<void> {
    return this.sendRpcMethod('push_allow_click', {});
  }

  // –ù–∞—Å—Ç—Ä–æ–∏—Ç—å push –ø–æ–∑–∂–µ
  async sendPushLaterClick(): Promise<void> {
    return this.sendRpcMethod('push_later_click', {});
  }

  // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º—É–∑—ã–∫–µ –ø–µ—Ä–µ–¥–∞–Ω–∞
  async sendMusicInfoPassed(): Promise<void> {
    return this.sendRpcMethod('music-info-passed', {});
  }

  // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–≤–æ–Ω–∫–∞—Ö –ø–µ—Ä–µ–¥–∞–Ω–∞
  async sendCallsInfoPassed(): Promise<void> {
    return this.sendRpcMethod('calls-info-passed', {});
  }

  // –û—Ç–∫—Ä—ã—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  async sendDefaultAssistantOpenClick(): Promise<void> {
    return this.sendRpcMethod('default-assistant-open-click', {});
  }

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∑–∞–≤–µ—Ä—à–µ–Ω–∞
  async sendDefaultAssistantSetupComplete(): Promise<void> {
    return this.sendRpcMethod('default-assistant-setup-complete', {});
  }

  // –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –ø–æ–∑–∂–µ
  async sendDefaultAssistantLaterClick(): Promise<void> {
    return this.sendRpcMethod('default-assistant-later-click', {});
  }

  // –ù–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ permission-result —Å –Ω—É–∂–Ω—ã–º payload
  async sendRequestPermissionsResult(): Promise<void> {
    return this.sendRpcMethod('permission-result', {
      permissions: ["microphone", "location"]
    });
  }

  // –ë–∞–∑–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ RPC –∫–æ–º–∞–Ω–¥
  async sendRpcMethod(method: string, data: any): Promise<void> {
    if (!this.room?.localParticipant) {
      throw new Error('Room not connected');
    }

    try {
      console.log(`Sending RPC method: ${method}`, data);

      await this.room.localParticipant.performRpc({
        destinationIdentity: '', // –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ RPC –∏–¥–µ—Ç –∫ –∞–≥–µ–Ω—Ç—É
        method: method,
        payload: JSON.stringify(data),
      });

      console.log(`RPC method ${method} sent successfully`);
    } catch (error) {
      console.error(`Failed to send RPC method ${method}:`, error);
      throw error;
    }
  }
}

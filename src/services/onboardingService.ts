import { Room } from 'livekit-client';
import { useAuthStore } from '../stores/authStore';

interface RpcAction {
  name: string;
  payload?: string;
}

interface Permission {
  type: string;
  title: string;
  subtitle: string;
  icon_url: string;
  rpc_on_allow?: RpcAction;
  rpc_on_deny?: RpcAction;
}

interface Button {
  text: string;
  rpc_on_click?: RpcAction;
}

interface RequestPermissionsData {
  text: string;
  permissions: Permission[];
  buttons: Button[];
}

// Legacy interface for backward compatibility
interface PermissionButton {
  text: string;
  rpc_on_click: string;
}

interface PermissionRequestData {
  text: string;
  buttons: PermissionButton[];
  rpc_on_deny: string;
}

interface NavigatorData {
  waypoints: Array<{
    name: string;
    location: {
      lat: number;
      lng: number;
    };
  }>;
  from_current_location: boolean;
}

export interface OnboardingScreenData {
  screen_type: string;
  use_microphone: boolean;
  avatar_state?: {
    input: string;
  };
  data?: PermissionRequestData | RequestPermissionsData | AddWaypointData | PaywallData | MainScreenData | NavigatorData | MapRouteConfirmData | ChooseMusicAppData | MusicAppStateData | UniversalScreenData | ChooseContactData | RequestPermissionData;
  analytics?: any;
}

export interface RpcCommand {
  method: string;
  command_data?: any;
}

interface LocationInfo {
  icon_url: string;
  text: string;
}

interface Location {
  lat: number;
  lng: number;
}

interface WaypointResult {
  id: string;
  number: number;
  label: string;
  title: string;
  subtitle: string;
  info: LocationInfo[];
  phone: string;
  waypoint_number: number;
  location: Location;
  selected: boolean;
  extended: boolean;
  rpc_on_card_click?: RpcAction;
  rpc_on_pin_click?: RpcAction;
  rpc_on_go_click?: RpcAction;
}

interface AddWaypointData {
  results: WaypointResult[];
  final_points: WaypointResult[];
  user_location: Location;
  rpc_on_map_interaction?: RpcAction;
}

export interface PaywallData {
  placement: string;
  rpc_on_purchase?: RpcAction;
  rpc_on_skip?: RpcAction;
}

interface MusicApp {
  icon_url: string;
  name: string;
  rpc_on_click: {
    name: string;
    payload: any;
  };
}

export interface ChooseMusicAppData {
  text: string;
  apps: MusicApp[];
}

export interface MusicAppStateData {
  text: string;
  buttons: Array<{
    name: string;
    icon_url?: string;
    rpc_on_click: {
      name: string;
      payload: any;
    };
  }>;
}

export interface MainScreenData {
  text: string;
  buttons: Array<{
    text: string;
    icon_url?: string;
    rpc_on_click: {
      name: string;
      payload?: any;
    };
  }>;
}

export interface MapRouteConfirmData {
  waypoints: Array<{
    label: string;
    name: string;
    location: {
      lat: number;
      lng: number;
    };
  }>;
  user_location: {
    lat: number;
    lng: number;
  };
  rpc_on_change_click: {
    name: string;
    payload?: any;
  };
  rpc_on_go_click: {
    name: string;
    payload?: any;
  };
}

export interface UniversalScreenData {
  title: string;
  subtitle?: string;
  image_url: string;
  buttons?: Array<{
    text: string;
    primary: boolean;
    rpc_on_click: RpcAction;
  }>;
}

export interface Contact {
  title: string;
  subtitle: string;
  label: string;
  rpc_on_call_click: {
    name: string;
    payload: string;
  } | null;
}

export interface ChooseContactData {
  text: string;
  contacts: Contact[];
}

// Export new types
// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è request-permission payload
interface RequestPermissionData {
  type: string;
  rpc_on_allow?: RpcAction;
  rpc_on_deny?: RpcAction;
}

export type { RpcAction, Permission, Button, RequestPermissionsData, WaypointResult, AddWaypointData, LocationInfo, Location, NavigatorData, RequestPermissionData };

export class OnboardingService {
  private room: Room | null = null;
  private onScreenUpdate?: (screenData: OnboardingScreenData) => void;
  private onRpcCommand?: (command: RpcCommand) => void;
  private onRequestPermissionPopup?: (data: RequestPermissionData) => void;
  private permissions: { microphone: boolean; location: boolean; push: boolean; apple_music: boolean } = {
    microphone: false,
    location: false,
    push: false,
    apple_music: false
  };

  private simulateLocationTimeout = false;

  setRoom(room: Room) {
    console.log('üîÑ Setting room in OnboardingService:', room);
    this.room = room;
    this.setupEventHandlers();
  }

  private async createFilteredCurrentItem() {
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ç—Ä–µ–∫ –∏–∑ store
    const { useOnboardingStore } = await import('../stores/onboardingStore');
    const currentTrack = useOnboardingStore.getState().currentTrack;

    // –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç - –≤–∫–ª—é—á–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ–ª—è —Å –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
    const current_item: { [key: string]: string } = {};

    if (currentTrack.song && currentTrack.song.trim() !== '') {
      current_item.song = currentTrack.song;
    }
    if (currentTrack.album && currentTrack.album.trim() !== '') {
      current_item.album = currentTrack.album;
    }
    if (currentTrack.artist && currentTrack.artist.trim() !== '') {
      current_item.artist = currentTrack.artist;
    }

    return current_item;
  }

  setOnScreenUpdate(callback: (screenData: OnboardingScreenData) => void) {
    console.log('üéØ Setting onScreenUpdate callback');
    this.onScreenUpdate = callback;
  }

  setOnRpcCommand(callback: (command: RpcCommand) => void) {
    console.log('üéØ Setting onRpcCommand callback');
    this.onRpcCommand = callback;
  }

  setOnRequestPermissionPopup(callback: (data: RequestPermissionData) => void) {
    console.log('üéØ Setting onRequestPermissionPopup callback');
    this.onRequestPermissionPopup = callback;
  }

  setPermissions(permissions: { microphone: boolean; location: boolean; push: boolean; apple_music: boolean }) {
    console.log('üîß Setting permissions:', permissions);
    console.log('üîß Previous permissions:', this.permissions);
    this.permissions = permissions;
    console.log('üîß New permissions set:', this.permissions);
  }

  setSimulateLocationTimeout(value: boolean) {
    console.log('üîß Setting simulate location timeout:', value);
    this.simulateLocationTimeout = value;
  }

  private onLocationTimeoutActiveChange?: (value: boolean) => void;

  setLocationTimeoutActiveCallback(callback: (value: boolean) => void) {
    this.onLocationTimeoutActiveChange = callback;
  }

  private setLocationTimeoutActive(value: boolean) {
    if (this.onLocationTimeoutActiveChange) {
      this.onLocationTimeoutActiveChange(value);
    }
  }

  private setupEventHandlers() {
    if (!this.room) {
      console.error('‚ùå Cannot setup event handlers: room is null');
      return;
    }

    console.log('üîß Setting up event handlers for room:', this.room);

    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º RPC –º–µ—Ç–æ–¥ show-screen –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —ç–∫—Ä–∞–Ω–æ–≤ –æ—Ç –∞–≥–µ–Ω—Ç–∞
    const showScreenHandler = async (data: any) => {
      try {
        console.log('üéØ Received show-screen RPC from agent:', data);

        // –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –æ—Ç –∞–≥–µ–Ω—Ç–∞
        let screenData;
        if (typeof data.payload === 'string') {
          screenData = JSON.parse(data.payload);
        } else {
          screenData = data.payload;
        }

        console.log('üì± Parsed screen data:', screenData);

        // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è choose_music_app - –ø–∞—Ä—Å–∏–º payload –≤ rpc_on_click
        if (screenData.screen_type === 'choose_music_app' && screenData.data?.apps) {
          screenData.data.apps.forEach((app: any) => {
            if (app.rpc_on_click?.payload && typeof app.rpc_on_click.payload === 'string') {
              try {
                app.rpc_on_click.payload = JSON.parse(app.rpc_on_click.payload);
                console.log('üîß Parsed app payload:', app.rpc_on_click.payload);
              } catch (e) {
                console.warn('‚ö†Ô∏è Could not parse app payload:', app.rpc_on_click.payload);
              }
            }
          });
        }

        // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è music_app_state - –ø–∞—Ä—Å–∏–º payload –≤ rpc_on_click
        if (screenData.screen_type === 'music_app_state' && screenData.data?.buttons) {
          screenData.data.buttons.forEach((button: any) => {
            if (button.rpc_on_click?.payload && typeof button.rpc_on_click.payload === 'string') {
              try {
                button.rpc_on_click.payload = JSON.parse(button.rpc_on_click.payload);
                console.log('üîß Parsed music_app_state button payload:', button.rpc_on_click.payload);
              } catch (e) {
                console.warn('‚ö†Ô∏è Could not parse music_app_state button payload:', button.rpc_on_click.payload);
              }
            }
          });
        }

        // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è choose_contact - –ø–∞—Ä—Å–∏–º payload –≤ rpc_on_call_click
        if (screenData.screen_type === 'choose_contact' && screenData.data?.contacts) {
          screenData.data.contacts.forEach((contact: any) => {
            if (contact.rpc_on_call_click?.payload && typeof contact.rpc_on_call_click.payload === 'string') {
              try {
                contact.rpc_on_call_click.payload = JSON.parse(contact.rpc_on_call_click.payload);
                console.log('üîß Parsed contact payload:', contact.rpc_on_call_click.payload);
              } catch (e) {
                console.warn('‚ö†Ô∏è Could not parse contact payload:', contact.rpc_on_call_click.payload);
                // –ï—Å–ª–∏ –ø–∞—Ä—Å–∏–Ω–≥ –Ω–µ —É–¥–∞–ª—Å—è, –æ—Å—Ç–∞–≤–ª—è–µ–º payload –∫–∞–∫ –µ—Å—Ç—å
              }
            }
          });
        }

        // –ü–µ—Ä–µ–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ —ç–∫—Ä–∞–Ω–∞ –≤ –∫–æ–ª–±—ç–∫
        if (this.onScreenUpdate) {
          console.log('‚úÖ Calling onScreenUpdate callback with data:', screenData);
          this.onScreenUpdate(screenData);
        } else {
          console.warn('‚ö†Ô∏è onScreenUpdate callback is not set');
        }

        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç –∞–≥–µ–Ω—Ç—É
        return JSON.stringify({ success: true });
      } catch (error) {
        console.error('‚ùå Error handling show-screen RPC:', error);
        return JSON.stringify({ success: false, error: (error as Error).message });
      }
    };

    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º RPC –º–µ—Ç–æ–¥ show-screen
    this.room.localParticipant.registerRpcMethod('show-screen', showScreenHandler);

    // RPC –º–µ—Ç–æ–¥ get-premium
    this.room.localParticipant.registerRpcMethod('get-premium', async (data) => {
      try {
        console.log('üéØ Received get-premium RPC from agent:', data);

        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ premium –∏–∑ authStore
        const currentPremium = useAuthStore.getState().premium;
        console.log('üîç Current premium status:', currentPremium);

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞
        if (this.onRpcCommand) {
          this.onRpcCommand({
            method: 'get-premium',
            command_data: data
          });
        }

        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º payload —Å —Ç–µ–∫—É—â–∏–º —Å—Ç–∞—Ç—É—Å–æ–º premium
        const response = { premium: currentPremium };
        console.log('üì§ Sending premium response:', response);

        return JSON.stringify(response);
      } catch (error) {
        console.error('‚ùå Error handling get-premium RPC:', error);
        return JSON.stringify({ premium: false, error: (error as Error).message });
      }
    });

    // –ù–æ–≤—ã–π RPC –º–µ—Ç–æ–¥ request_permissions
    this.room.localParticipant.registerRpcMethod('request-permissions', async (data) => {
      try {
        let payload;
        if (typeof data.payload === 'string') {
          payload = JSON.parse(data.payload);
        } else {
          payload = data.payload;
        }
        // –ü–µ—Ä–µ–¥–∞—ë–º –≤ onScreenUpdate —ç–∫—Ä–∞–Ω —Å —Ç–∏–ø–æ–º 'request_permissions'
        this.onScreenUpdate?.({
          screen_type: 'request-permissions',
          use_microphone: false,
          data: payload,
        });
        return JSON.stringify({ success: true });
      } catch (error) {
        return JSON.stringify({ success: false, error: (error as Error).message });
      }
    });

    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º RPC –º–µ—Ç–æ–¥ get-permissions –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    this.room.localParticipant.registerRpcMethod('get-permissions', async (data) => {
      try {
        console.log('üéØ Received get-permissions RPC from agent:', data);
        console.log('üîç Current permissions state:', this.permissions);

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞
        if (this.onRpcCommand) {
          this.onRpcCommand({
            method: 'get-permissions',
            command_data: data
          });
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
        const hasAnyPermission = Object.values(this.permissions).some(p => p === true);
        console.log('üîç Has any permission granted:', hasAnyPermission);

        // –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–æ—Ä–º–∞—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        const defaultFormat = this.permissions;
        const arrayFormat = Object.entries(this.permissions)
          .filter(([_, granted]) => granted)
          .map(([permission, _]) => permission);
        const compactFormat = hasAnyPermission ? this.permissions : null;

        console.log('üì§ Default format:', defaultFormat);
        console.log('üì§ Array format (only granted):', arrayFormat);
        console.log('üì§ Compact format (null if no permissions):', compactFormat);

        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–æ—Ä–º–∞—Ç
        const response = JSON.stringify(defaultFormat);
        console.log('üì§ Sending permissions response:', response);
        console.log('üì§ Response type:', typeof response);
        console.log('üì§ Response length:', response.length);

        // –ï—Å–ª–∏ –Ω–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π, –≤–æ–∑–º–æ–∂–Ω–æ –∞–≥–µ–Ω—Ç –æ–∂–∏–¥–∞–µ—Ç null –∏–ª–∏ –¥—Ä—É–≥–æ–π —Ñ–æ—Ä–º–∞—Ç
        if (!hasAnyPermission) {
          console.log('‚ö†Ô∏è No permissions granted, agent might interpret this as None');
          console.log('üí° Alternative formats to try:');
          console.log('   - Array format:', JSON.stringify(arrayFormat));
          console.log('   - Null format:', JSON.stringify(compactFormat));
          console.log('   - Empty object:', JSON.stringify({}));
        }

        return response;
      } catch (error) {
        console.error('‚ùå Error handling get-permissions RPC:', error);
        const errorResponse = JSON.stringify({ success: false, error: (error as Error).message });
        console.log('üì§ Sending error response:', errorResponse);
        return errorResponse;
      }
    });

    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º RPC –º–µ—Ç–æ–¥ get-apple-music-subscription
    this.room.localParticipant.registerRpcMethod('get-apple-music-subscription', async (data) => {
      try {
        console.log('üéØ Received get-apple-music-subscription RPC from agent:', data);

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞
        if (this.onRpcCommand) {
          this.onRpcCommand({
            method: 'get-apple-music-subscription',
            command_data: data
          });
        }

        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ Apple Music subscription –∏–∑ store
        const { useOnboardingStore } = await import('../stores/onboardingStore');
        const currentState = useOnboardingStore.getState().appleMusicSubscriptionActive;
        console.log('üîç Current Apple Music subscription state:', currentState);

        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º payload —Å —Ç–µ–∫—É—â–∏–º —Å—Ç–∞—Ç—É—Å–æ–º
        const response = { active: currentState };
        console.log('üì§ Sending Apple Music subscription response:', response);

        return JSON.stringify(response);
      } catch (error) {
        console.error('‚ùå Error handling get-apple-music-subscription RPC:', error);
        return JSON.stringify({ active: false, error: (error as Error).message });
      }
    });

    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º RPC –º–µ—Ç–æ–¥ play-music-with-search
    this.room.localParticipant.registerRpcMethod('play-music-with-search', async (data) => {
      try {
        console.log('üéØ Received play-music-with-search RPC from agent:', data);

        // –ü–∞—Ä—Å–∏–º payload
        let payload;
        if (typeof data.payload === 'string') {
          payload = JSON.parse(data.payload);
        } else {
          payload = data.payload;
        }

        console.log('üîç Parsed music search payload:', payload);

        // –í–∞–ª–∏–¥–∞—Ü–∏—è - —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –ø–æ–ª–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ null
        const { app, song, album, artist } = payload;
        const hasValidField = app !== null || song !== null || album !== null || artist !== null;

        if (!hasValidField) {
          console.error('‚ùå Invalid payload: at least one field (app, song, album, artist) must be non-null');
          return JSON.stringify({
            error: "At least one field (app, song, album, artist) must be non-null"
          });
        }

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞
        if (this.onRpcCommand) {
          this.onRpcCommand({
            method: 'play-music-with-search',
            command_data: data
          });
        }

        // –ü–æ–ª—É—á–∞–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º —Ç—Ä–µ–∫–µ
        const current_item = await this.createFilteredCurrentItem();
        const response = {
          current_item
        };

        console.log('üì§ Sending play-music response:', response);
        return JSON.stringify(response);
      } catch (error) {
        console.error('‚ùå Error handling play-music-with-search RPC:', error);
        return JSON.stringify({
          error: (error as Error).message,
          current_item: {}
        });
      }
    });

    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º RPC –º–µ—Ç–æ–¥ get-location
    this.room.localParticipant.registerRpcMethod('get-location', async (data) => {
      try {
        console.log('üéØ Received get-location RPC from agent:', data);

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞
        if (this.onRpcCommand) {
          this.onRpcCommand({
            method: 'get-location',
            command_data: data
          });
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ —Å–∏–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –æ—à–∏–±–∫—É RESPONSE_TIMEOUT
        if (this.simulateLocationTimeout) {
          console.log('‚è∞ Simulating RESPONSE_TIMEOUT by delaying response for 15 seconds');
          console.log('‚è∞ LiveKit should timeout this RPC call before we respond');

          // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Ç–∞–π–º–∞—É—Ç–∞
          this.setLocationTimeoutActive(true);

          // –ó–∞–¥–µ—Ä–∂–∏–≤–∞–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ 15 —Å–µ–∫—É–Ω–¥, —á—Ç–æ–±—ã LiveKit –≤—ã–¥–∞–ª —Ä–µ–∞–ª—å–Ω—É—é –æ—à–∏–±–∫—É —Ç–∞–π–º–∞—É—Ç–∞
          const timeoutPromise = new Promise(resolve => setTimeout(resolve, 15000));

          // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 3 —Å–µ–∫—É–Ω–¥—ã
          const progressInterval = setInterval(() => {
            console.log('‚è∞ Still waiting for LiveKit timeout...');
          }, 3000);

          try {
            await timeoutPromise;
            clearInterval(progressInterval);
            console.log('‚è∞ 15 seconds elapsed - this should not be reached due to LiveKit timeout');
          } finally {
            // –°–Ω–∏–º–∞–µ–º —Ñ–ª–∞–≥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Ç–∞–π–º–∞—É—Ç–∞
            this.setLocationTimeoutActive(false);
          }
        }

        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
        // const locationResponse = {
        //   lat: 40.77784899,
        //   lng: -74.146540831
        // };

        const locationResponse = {
          lat: 34.07044502254812,
          lng: -118.40208915222966
        };

        console.log('üìç Sending location response:', locationResponse);
        return JSON.stringify(locationResponse);
      } catch (error) {
        console.error('‚ùå Error handling get-location RPC:', error);
        return JSON.stringify({ success: false, error: (error as Error).message });
      }
    });

    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º RPC –º–µ—Ç–æ–¥ open-navigator
    this.room.localParticipant.registerRpcMethod('open-navigator', async (data) => {
      try {
        console.log('üéØ Received open-navigator RPC from agent:', data);

        // –ü–∞—Ä—Å–∏–º payload –µ—Å–ª–∏ –æ–Ω –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏
        let payload;
        if (typeof data.payload === 'string') {
          payload = JSON.parse(data.payload);
        } else {
          payload = data.payload || data;
        }

        console.log('üß≠ Parsed navigator payload:', payload);

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞
        if (this.onRpcCommand) {
          this.onRpcCommand({
            method: 'open-navigator',
            command_data: payload
          });
        }

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω –Ω–∞–≤–∏–≥–∞—Ç–æ—Ä–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –º–∞—Ä—à—Ä—É—Ç–∞
        if (this.onScreenUpdate) {
          this.onScreenUpdate({
            screen_type: 'navigator',
            use_microphone: false,
            data: payload
          });
        }

        console.log('üß≠ Opening navigation screen with route data');
        return JSON.stringify({ success: true, message: 'Navigation opened' });
      } catch (error) {
        console.error('‚ùå Error handling open-navigator RPC:', error);
        return JSON.stringify({ success: false, error: (error as Error).message });
      }
    });

    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º RPC –º–µ—Ç–æ–¥ set-avatar-state –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –∞–≤–∞—Ç–∞—Ä–∞
    this.room.localParticipant.registerRpcMethod('set-avatar-state', async (data) => {
      try {
        console.log('üéØ Received set-avatar-state RPC from agent:', data);

        // –ü–∞—Ä—Å–∏–º payload –µ—Å–ª–∏ –æ–Ω –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏
        let payload;
        if (typeof data.payload === 'string') {
          payload = JSON.parse(data.payload);
        } else {
          payload = data.payload || data;
        }

        console.log('üë§ Parsed avatar state payload:', payload);

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞
        if (this.onRpcCommand) {
          this.onRpcCommand({
            method: 'set-avatar-state',
            command_data: payload
          });
        }

        console.log('üë§ Avatar state updated:', payload);
        return JSON.stringify({ success: true, message: 'Avatar state updated' });
      } catch (error) {
        console.error('‚ùå Error handling set-avatar-state RPC:', error);
        return JSON.stringify({ success: false, error: (error as Error).message });
      }
    });

    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º RPC –º–µ—Ç–æ–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º—É–∑—ã–∫–æ–π
    this.room.localParticipant.registerRpcMethod('next-track', async (data) => {
      try {
        console.log('üéØ Received next-track RPC from agent:', data);

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞
        if (this.onRpcCommand) {
          this.onRpcCommand({
            method: 'next-track',
            command_data: data
          });
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –º—É–∑—ã–∫–∞–ª—å–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã
        const { useOnboardingStore } = await import('../stores/onboardingStore');
        useOnboardingStore.getState().setLastMusicCommand('next-track');

        // –ü–æ–ª—É—á–∞–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º —Ç—Ä–µ–∫–µ
        const current_item = await this.createFilteredCurrentItem();

        console.log('‚è≠Ô∏è Next track command processed');
        return JSON.stringify({
          success: true,
          message: 'Next track command received',
          current_item
        });
      } catch (error) {
        console.error('‚ùå Error handling next-track RPC:', error);
        return JSON.stringify({
          success: false,
          error: (error as Error).message,
          current_item: {}
        });
      }
    });

    this.room.localParticipant.registerRpcMethod('previous-track', async (data) => {
      try {
        console.log('üéØ Received previous-track RPC from agent:', data);

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞
        if (this.onRpcCommand) {
          this.onRpcCommand({
            method: 'previous-track',
            command_data: data
          });
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –º—É–∑—ã–∫–∞–ª—å–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã
        const { useOnboardingStore } = await import('../stores/onboardingStore');
        useOnboardingStore.getState().setLastMusicCommand('previous-track');

        // –ü–æ–ª—É—á–∞–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º —Ç—Ä–µ–∫–µ
        const current_item = await this.createFilteredCurrentItem();

        console.log('‚èÆÔ∏è Previous track command processed');
        return JSON.stringify({
          success: true,
          message: 'Previous track command received',
          current_item
        });
      } catch (error) {
        console.error('‚ùå Error handling previous-track RPC:', error);
        return JSON.stringify({
          success: false,
          error: (error as Error).message,
          current_item: {}
        });
      }
    });

    this.room.localParticipant.registerRpcMethod('pause-track', async (data) => {
      try {
        console.log('üéØ Received pause-track RPC from agent:', data);

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞
        if (this.onRpcCommand) {
          this.onRpcCommand({
            method: 'pause-track',
            command_data: data
          });
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –º—É–∑—ã–∫–∞–ª—å–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã
        const { useOnboardingStore } = await import('../stores/onboardingStore');
        useOnboardingStore.getState().setLastMusicCommand('pause-track');

        // –ü–æ–ª—É—á–∞–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º —Ç—Ä–µ–∫–µ
        const current_item = await this.createFilteredCurrentItem();

        console.log('‚è∏Ô∏è Pause track command processed');
        return JSON.stringify({
          success: true,
          message: 'Pause track command received',
          current_item
        });
      } catch (error) {
        console.error('‚ùå Error handling pause-track RPC:', error);
        return JSON.stringify({
          success: false,
          error: (error as Error).message,
          current_item: {}
        });
      }
    });

    this.room.localParticipant.registerRpcMethod('resume-track', async (data) => {
      try {
        console.log('üéØ Received resume-track RPC from agent:', data);

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞
        if (this.onRpcCommand) {
          this.onRpcCommand({
            method: 'resume-track',
            command_data: data
          });
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –º—É–∑—ã–∫–∞–ª—å–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã
        const { useOnboardingStore } = await import('../stores/onboardingStore');
        useOnboardingStore.getState().setLastMusicCommand('resume-track');

        // –ü–æ–ª—É—á–∞–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º —Ç—Ä–µ–∫–µ
        const current_item = await this.createFilteredCurrentItem();

        console.log('‚ñ∂Ô∏è Resume track command processed');
        return JSON.stringify({
          success: true,
          message: 'Resume track command received',
          current_item
        });
      } catch (error) {
        console.error('‚ùå Error handling resume-track RPC:', error);
        return JSON.stringify({
          success: false,
          error: (error as Error).message,
          current_item: {}
        });
      }
    });

    this.room.localParticipant.registerRpcMethod('play-music', async (data) => {
      try {
        console.log('üéØ Received play-music RPC from agent:', data);

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞
        if (this.onRpcCommand) {
          this.onRpcCommand({
            method: 'play-music',
            command_data: data
          });
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –º—É–∑—ã–∫–∞–ª—å–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã
        const { useOnboardingStore } = await import('../stores/onboardingStore');
        useOnboardingStore.getState().setLastMusicCommand('play-music');

        // –ü–æ–ª—É—á–∞–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º —Ç—Ä–µ–∫–µ
        const current_item = await this.createFilteredCurrentItem();

        console.log('üéµ Play music command processed');
        return JSON.stringify({
          success: true,
          message: 'Play music command received',
          current_item
        });
      } catch (error) {
        console.error('‚ùå Error handling play-music RPC:', error);
        return JSON.stringify({
          success: false,
          error: (error as Error).message,
          current_item: {}
        });
      }
    });

    this.room.localParticipant.registerRpcMethod('open-music-app', async (data) => {
      try {
        console.log('üéØ Received open-music-app RPC from agent:', data);

        // –ü–∞—Ä—Å–∏–º payload –µ—Å–ª–∏ –æ–Ω –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏
        let payload;
        if (typeof data.payload === 'string') {
          payload = JSON.parse(data.payload);
        } else {
          payload = data.payload || data;
        }

        console.log('üéµ Parsed open-music-app payload:', payload);

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞
        if (this.onRpcCommand) {
          this.onRpcCommand({
            method: 'open-music-app',
            command_data: payload
          });
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –º—É–∑—ã–∫–∞–ª—å–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        const { useOnboardingStore } = await import('../stores/onboardingStore');
        const appName = payload?.app || 'unknown app';
        useOnboardingStore.getState().setLastMusicCommand('open-music-app', appName);

        console.log('üì± Open music app command processed:', appName);
        return JSON.stringify({ success: true, message: `Open ${appName} command received` });
      } catch (error) {
        console.error('‚ùå Error handling open-music-app RPC:', error);
        return JSON.stringify({ success: false, error: (error as Error).message });
      }
    });

    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º RPC –º–µ—Ç–æ–¥ request-permission
    this.room.localParticipant.registerRpcMethod('request-permission', async (data) => {
      try {
        console.log('üéØ Received request-permission RPC from agent:', data);

        // –ü–∞—Ä—Å–∏–º payload
        let payload;
        if (typeof data.payload === 'string') {
          payload = JSON.parse(data.payload);
        } else {
          payload = data.payload;
        }

        console.log('üîç Parsed request-permission payload:', payload);

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞
        if (this.onRpcCommand) {
          this.onRpcCommand({
            method: 'request-permission',
            command_data: payload
          });
        }

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ø–∞–ø —Å –∑–∞–ø—Ä–æ—Å–æ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è —á–µ—Ä–µ–∑ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –∫–æ–ª–±—ç–∫
        if (this.onRequestPermissionPopup) {
          console.log('üîê Calling onRequestPermissionPopup with payload:', payload);
          this.onRequestPermissionPopup(payload);
        } else {
          console.warn('‚ö†Ô∏è onRequestPermissionPopup callback is not set');
        }

        console.log('üîê Permission request popup shown');
        return JSON.stringify({ success: true });
      } catch (error) {
        console.error('‚ùå Error handling request-permission RPC:', error);
        return JSON.stringify({ success: false, error: (error as Error).message });
      }
    });

    console.log('üîß RPC methods registered successfully');

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö –æ—Ç –∞–≥–µ–Ω—Ç–∞ (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
    this.room.on('dataReceived', (payload: Uint8Array) => {
      try {
        const decoder = new TextDecoder();
        const text = decoder.decode(payload);
        const data = JSON.parse(text);

        console.log('üì° Received data from agent:', data);

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –∞–≥–µ–Ω—Ç–∞
        if (data.type === 'show_screen') {
          this.onScreenUpdate?.(data);
        } else if (data.type === 'rpc_command') {
          console.log('üéØ Processing RPC command:', data);
          this.onRpcCommand?.({
            method: data.method,
            command_data: data.payload
          });
        }
      } catch (error) {
        console.error('‚ùå Error parsing received data:', error);
      }
    });
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞
  async startOnboarding(): Promise<void> {
    if (!this.room?.localParticipant) {
      throw new Error('Room not connected');
    }

    try {
      console.log('Starting onboarding...');

      // –í—ã–∑—ã–≤–∞–µ–º RPC –º–µ—Ç–æ–¥ start_onboarding —É –∞–≥–µ–Ω—Ç–∞
      await this.room.localParticipant.performRpc({
        destinationIdentity: '', // –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ RPC –∏–¥–µ—Ç –∫ –∞–≥–µ–Ω—Ç—É
        method: 'start_onboarding',
        payload: JSON.stringify({}),
      });

      console.log('Onboarding started successfully');
    } catch (error) {
      console.error('Failed to start onboarding:', error);
      throw error;
    }
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
  async sendPermissionResult(permissionType: string, granted: boolean): Promise<void> {
    return this.sendRpcMethod('permission-result', {
      permission_type: permissionType,
      granted: granted
    });
  }

  // –ö–ª–∏–∫ "–†–∞–∑—Ä–µ—à–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –ª–æ–∫–∞—Ü–∏–∏"
  async sendLocationAllowClick(): Promise<void> {
    return this.sendRpcMethod('location-allow-click', {});
  }

  // –ö–ª–∏–∫ "–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–æ–∑–∂–µ"
  async sendLocationLaterClick(): Promise<void> {
    return this.sendRpcMethod('location-later-click', {});
  }

  // –ö–ª–∏–∫ "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å" —Å –º–µ—Å—Ç–æ–º
  async sendPlaceContinueClick(): Promise<void> {
    return this.sendRpcMethod('place-continue-click', {});
  }

  // –£—Å–ø–µ—à–Ω–∞—è –ø–æ–∫—É–ø–∫–∞
  async sendSuccessfulPurchase(): Promise<void> {
    return this.sendRpcMethod('successful-purchase', {});
  }

  // –ü—Ä–æ–ø—É—Å–∫ –ø–æ–∫—É–ø–∫–∏
  async sendPurchaseSkip(): Promise<void> {
    return this.sendRpcMethod('purchase-skip', {});
  }

  // –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  async sendPushAllowClick(): Promise<void> {
    return this.sendRpcMethod('push_allow_click', {});
  }

  // –ù–∞—Å—Ç—Ä–æ–∏—Ç—å push –ø–æ–∑–∂–µ
  async sendPushLaterClick(): Promise<void> {
    return this.sendRpcMethod('push_later_click', {});
  }

  // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º—É–∑—ã–∫–µ –ø–µ—Ä–µ–¥–∞–Ω–∞
  async sendMusicInfoPassed(): Promise<void> {
    return this.sendRpcMethod('music-info-passed', {});
  }

  // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–≤–æ–Ω–∫–∞—Ö –ø–µ—Ä–µ–¥–∞–Ω–∞
  async sendCallsInfoPassed(): Promise<void> {
    return this.sendRpcMethod('calls-info-passed', {});
  }

  // –û—Ç–∫—Ä—ã—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  async sendDefaultAssistantOpenClick(): Promise<void> {
    return this.sendRpcMethod('default-assistant-open-click', {});
  }

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∑–∞–≤–µ—Ä—à–µ–Ω–∞
  async sendDefaultAssistantSetupComplete(): Promise<void> {
    return this.sendRpcMethod('default-assistant-setup-complete', {});
  }

  // –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –ø–æ–∑–∂–µ
  async sendDefaultAssistantLaterClick(): Promise<void> {
    return this.sendRpcMethod('default-assistant-later-click', {});
  }

  // –ù–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ permission-result —Å –Ω—É–∂–Ω—ã–º payload
  async sendRequestPermissionsResult(): Promise<void> {
    return this.sendRpcMethod('permission-result', {
      permissions: ["microphone", "location"]
    });
  }

  // –ë–∞–∑–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ RPC –∫–æ–º–∞–Ω–¥
  async sendRpcMethod(method: string, data: any): Promise<void> {
    if (!this.room?.localParticipant) {
      throw new Error('Room not connected');
    }

    try {
      console.log(`üöÄ Sending RPC method: ${method}`, data);
      console.log(`üöÄ Data type:`, typeof data);
      console.log(`üöÄ Data stringified:`, JSON.stringify(data));
      console.log(`üì° Room participants:`, Array.from(this.room.remoteParticipants.keys()));

      // –ù–∞–π–¥–µ–º –∞–≥–µ–Ω—Ç–∞ —Å—Ä–µ–¥–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
      const agentParticipant = Array.from(this.room.remoteParticipants.values())
        .find(p => p.identity.includes('agent') || p.identity.includes('assistant'));

      const destinationIdentity = agentParticipant?.identity || '';

      console.log(`üéØ Sending to destination: "${destinationIdentity}"`);

      // –ï—Å–ª–∏ data —É–∂–µ —Å—Ç—Ä–æ–∫–∞ JSON, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ—ë –∫–∞–∫ –µ—Å—Ç—å, –∏–Ω–∞—á–µ —Å–µ—Ä–∏–∞–ª–∏–∑—É–µ–º
      const payload = typeof data === 'string' ? data : JSON.stringify(data);
      console.log(`üì§ Final payload being sent:`, payload);
      console.log(`üì§ Final payload type:`, typeof payload);
      console.log(`üì§ Final payload length:`, payload.length);

      const result = await this.room.localParticipant.performRpc({
        destinationIdentity: destinationIdentity,
        method: method,
        payload: payload,
      });

      console.log(`‚úÖ RPC method ${method} sent successfully, response:`, result);
    } catch (error) {
      console.error(`‚ùå Failed to send RPC method ${method}:`, error);

      // –ü–æ–ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ—Ä–µ–∑ DataChannel –∫–∞–∫ fallback
      console.log(`üîÑ Trying to send via DataChannel as fallback...`);
      try {
        const encoder = new TextEncoder();
        // –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ –¥–ª—è DataChannel
        const rpcPayload = typeof data === 'string' ? data : JSON.stringify(data);
        const fallbackData = encoder.encode(JSON.stringify({
          type: 'rpc_request',
          method: method,
          data: rpcPayload
        }));

        await this.room.localParticipant.publishData(fallbackData, { reliable: true });
        console.log(`‚úÖ Sent via DataChannel successfully`);
      } catch (fallbackError) {
        console.error(`‚ùå DataChannel fallback also failed:`, fallbackError);
        throw error;
      }
    }
  }
}

/*
  TracingService: —Ç–æ–Ω–∫–∞—è –æ–±–µ—Ä—Ç–∫–∞ –Ω–∞–¥ OpenTelemetry Web.
  - –°—Ç–∞—Ä—Ç—É–µ—Ç/–∑–∞–≤–µ—Ä—à–∞–µ—Ç —Å–ø–∞–Ω—ã —á–µ—Ä–µ–∑ OTel
  - –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç traceparent –∏–∑ OTel-–∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
  - –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —É—Å–ª–æ–≤–Ω–æ–µ –≤–∫–ª—é—á–µ–Ω–∏–µ/–≤—ã–∫–ª—é—á–µ–Ω–∏–µ —Ç—Ä–µ–π—Å–∏–Ω–≥–∞
*/
import { otelTracer, context, trace, provider } from './otel';
import { useTracingStore } from '../stores/tracingStore';

type HexString = string;

interface Span {
    spanId: HexString;
    name: string;
    startTime: number;
    endTime?: number;
    attributes?: Record<string, unknown>;
}

export class TracingService {
    private static instance: TracingService | null = null;
    private traceId: HexString | null = null;
    private currentSpan: Span | null = null;
    private tracestate: string | undefined;
    private rootOtelSpan: any = null;  // –•—Ä–∞–Ω–∏–º —Å—Å—ã–ª–∫—É –Ω–∞ root OTel span
    private currentOtelSpan: any = null;  // –•—Ä–∞–Ω–∏–º —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–µ–∫—É—â–∏–π OTel span
    private ctxStack: any[] = []; // –°—Ç–µ–∫ –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏

    public static getInstance(): TracingService {
        if (!this.instance) {
            this.instance = new TracingService();
        }
        return this.instance;
    }

    // 16 –±–∞–π—Ç –¥–ª—è traceId (32 hex), 8 –±–∞–π—Ç –¥–ª—è spanId (16 hex)
    private static generateId(bytes: number): HexString {
        const array = new Uint8Array(bytes);
        if (typeof crypto !== 'undefined' && crypto.getRandomValues) {
            crypto.getRandomValues(array);
        } else {
            for (let i = 0; i < bytes; i++) array[i] = Math.floor(Math.random() * 256);
        }
        return Array.from(array)
            .map((b) => b.toString(16).padStart(2, '0'))
            .join('');
    }

    public startRootTrace(name: string): { traceId: HexString; spanId: HexString } {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω –ª–∏ —Ç—Ä–µ–π—Å–∏–Ω–≥
        const isEnabled = useTracingStore.getState().isEnabled;
        if (!isEnabled) {
            console.log('üîç Tracing disabled, skipping root trace');
            return { traceId: '', spanId: '' };
        }

        console.log('üîç Starting root trace:', name);
        const span = otelTracer.startSpan(name, { kind: 1 /* CLIENT */ });
        this.rootOtelSpan = span;  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ root span
        const ctx = trace.setSpan(context.active(), span);
        const sc = span.spanContext();
        this.traceId = sc.traceId as HexString;
        this.currentSpan = {
            spanId: sc.spanId as HexString,
            name,
            startTime: performance.now(),
        };
        // —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∫–∞–∫ –∞–∫—Ç–∏–≤–Ω—ã–π
        (this as any)._ctx = ctx;
        console.log('üîç Root trace started:', { traceId: this.traceId, spanId: sc.spanId });
        return { traceId: this.traceId, spanId: sc.spanId as HexString };
    }

    public async endRootTrace(): Promise<void> {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω –ª–∏ —Ç—Ä–µ–π—Å–∏–Ω–≥
        const isEnabled = useTracingStore.getState().isEnabled;
        if (!isEnabled) {
            console.log('üîç Tracing disabled, skipping end root trace');
            return;
        }

        console.log('üîç Ending root trace');
        if (!this.rootOtelSpan) {
            console.warn('üîç No root span to end');
            return;
        }

        // –ó–∞–≤–µ—Ä—à–∞–µ–º root span –Ω–∞–ø—Ä—è–º—É—é
        console.log('üîç Calling rootOtelSpan.end()');
        this.rootOtelSpan.end();

        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Ñ–ª–∞—à–∏–º –≤—Å–µ —Å–ø–∞–Ω—ã
        console.log('üîç Force flushing spans...');
        try {
            await provider.forceFlush();
            console.log('üîç Flush completed');
        } catch (e) {
            console.error('üîç Flush error:', e);
        }

        this.rootOtelSpan = null;
        this.currentOtelSpan = null;
        this.currentSpan = null;
        this.traceId = null;
        this.tracestate = undefined;
    }

    public startChildSpan(name: string, attributes?: Record<string, unknown>): { traceId: HexString; spanId: HexString; parentSpanId?: HexString } {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω –ª–∏ —Ç—Ä–µ–π—Å–∏–Ω–≥
        const isEnabled = useTracingStore.getState().isEnabled;
        if (!isEnabled) {
            console.log('üîç Tracing disabled, skipping child span');
            return { traceId: '', spanId: '', parentSpanId: undefined };
        }

        console.log('üîç Starting child span:', name);
        const activeCtx = (this as any)._ctx || context.active();
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤ —Å—Ç–µ–∫, —á—Ç–æ–±—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å—Å—è –ø—Ä–∏ –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö —Å–ø–∞–Ω–∞—Ö
        this.ctxStack.push(activeCtx);
        const span = otelTracer.startSpan(name, { kind: 1 /* CLIENT */ }, activeCtx);
        this.currentOtelSpan = span;  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ child span
        const sc = span.spanContext();
        this.currentSpan = {
            spanId: sc.spanId as HexString,
            name,
            startTime: performance.now(),
            attributes,
        };
        // –æ–±–Ω–æ–≤–∏–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
        (this as any)._ctx = trace.setSpan(activeCtx, span);
        console.log('üîç Child span started:', { traceId: sc.traceId, spanId: sc.spanId });
        return { traceId: (sc.traceId as HexString), spanId: (sc.spanId as HexString), parentSpanId: undefined };
    }

    public endSpan(): void {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω –ª–∏ —Ç—Ä–µ–π—Å–∏–Ω–≥
        const isEnabled = useTracingStore.getState().isEnabled;
        if (!isEnabled) {
            console.log('üîç Tracing disabled, skipping end span');
            return;
        }

        console.log('üîç Ending span');
        if (!this.currentOtelSpan) {
            console.warn('üîç No current span to end');
            return;
        }

        // –ó–∞–≤–µ—Ä—à–∞–µ–º span –Ω–∞–ø—Ä—è–º—É—é
        console.log('üîç Calling currentOtelSpan.end()');
        this.currentOtelSpan.end();
        this.currentOtelSpan = null;
        this.currentSpan = null;

        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç: —Å–ø–µ—Ä–≤–∞ –∏–∑–≤–ª–µ–∫–∞–µ–º –∏–∑ —Å—Ç–µ–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π
        const prevCtx = this.ctxStack.pop();
        if (prevCtx) {
            (this as any)._ctx = prevCtx;
            console.log('üîç Context restored to previous span context');
        } else if (this.rootOtelSpan) {
            (this as any)._ctx = trace.setSpan(context.active(), this.rootOtelSpan);
            console.log('üîç Context restored to root span');
        } else {
            (this as any)._ctx = context.active();
            console.log('üîç Context cleared to active()');
        }
    }

    public getTraceparentFor(spanId?: HexString): string | null {
        if (!this.traceId) return null;
        // —Å—Ç—Ä–æ–∏–º –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–ø–∞–Ω–∞ (–∏–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–≥–æ spanId)
        const activeSpan = trace.getActiveSpan();
        const sc = activeSpan?.spanContext();
        const version = '00';
        const traceId = sc?.traceId || this.traceId;
        const id = spanId || sc?.spanId || this.currentSpan?.spanId || TracingService.generateId(8);
        const flags = '01'; // sampled
        if (!traceId) return null;
        return `${version}-${traceId}-${id}-${flags}`;
    }

    public getTracestate(): string | undefined {
        return this.tracestate;
    }

    public getActiveContext(): { traceId: HexString | null; spanId: HexString | null; traceparent: string | null; tracestate?: string } {
        const spanId = this.currentSpan?.spanId ?? null;
        const traceparent = this.getTraceparentFor(spanId ?? undefined);
        return {
            traceId: this.traceId,
            spanId,
            traceparent,
            tracestate: this.tracestate,
        };
    }
}

export const tracing = TracingService.getInstance();



import { WebTracerProvider } from '@opentelemetry/sdk-trace-web';
import { SimpleSpanProcessor, ConsoleSpanExporter } from '@opentelemetry/sdk-trace-base';
import { OTLPTraceExporter } from '@opentelemetry/exporter-trace-otlp-http';
import { ZoneContextManager } from '@opentelemetry/context-zone';
import { W3CTraceContextPropagator } from '@opentelemetry/core';
import { context, propagation, trace } from '@opentelemetry/api';
import { getEnv } from '../utils/env';

// –°–æ–∑–¥–∞–µ–º resource —Å –∞—Ç—Ä–∏–±—É—Ç–∞–º–∏ —Å–µ—Ä–≤–∏—Å–∞
const resourceAttributes = {
    'service.name': 'web-client',
    'service.version': '1.0.0',
};

const config: any = {
    resource: {
        attributes: resourceAttributes
    }
};

const provider = new WebTracerProvider(config);

// –î–ª—è dev –∏—Å–ø–æ–ª—å–∑—É–µ–º OTLP —á–µ—Ä–µ–∑ Caddy CORS proxy –Ω–∞ –ø–æ—Ä—Ç—É 4319
// –î–ª—è prod –∑–∞–¥–∞–π VITE_OTLP_HTTP_URL
const otlpEnabled = getEnv('VITE_OTLP_ENABLED') === 'true';
const otlpUrl = getEnv('VITE_OTLP_HTTP_URL') || 'http://localhost:4319/v1/traces';

let exporter: any;
if (otlpEnabled) {
    console.log('üîç Using OTLP exporter:', otlpUrl);
    exporter = new OTLPTraceExporter({
        url: otlpUrl,
        headers: {
            'Content-Type': 'application/json'
        }
    });
} else {
    console.log('üîç Using Console exporter (dev mode)');
    exporter = new ConsoleSpanExporter();
}

// –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ—Ä–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è OTLP)
if (otlpEnabled) {
    const originalExport = exporter.export.bind(exporter);
    exporter.export = (spans: any, resultCallback: any) => {
        console.log('üîç OTLP Exporter: sending', spans.length, 'spans to', otlpUrl);

        // –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–µ—Ä–≤–æ–≥–æ span'–∞
        if (spans.length > 0) {
            console.log('üîç Span resource.attributes:', spans[0].resource?.attributes);
        }

        return originalExport(spans, (result: any) => {
            if (result.code !== 0) {
                console.error('üîç OTLP Exporter error:', result);
            } else {
                console.log('üîç OTLP Exporter success');
            }
            resultCallback(result);
        });
    };
}

// –ò—Å–ø–æ–ª—å–∑—É–µ–º SimpleSpanProcessor –¥–ª—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
provider.addSpanProcessor(new SimpleSpanProcessor(exporter));

provider.register({
    contextManager: new ZoneContextManager(),
    propagator: new W3CTraceContextPropagator(),
});

const otelTracer = trace.getTracer('web-client', '1.0.0');

// –õ–æ–≥–∏—Ä—É–µ–º –∫–∞–∂–¥–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–ø–∞–Ω–∞
const originalStartSpan = otelTracer.startSpan.bind(otelTracer);
(otelTracer as any).startSpan = function (name: string, options?: any, ctx?: any) {
    console.log('üîç OTel: Creating span:', name, 'options:', options, 'hasContext:', !!ctx);
    const span = originalStartSpan(name, options, ctx);
    console.log('üîç OTel: Span created:', span.spanContext());

    // –õ–æ–≥–∏—Ä—É–µ–º –∫–æ–≥–¥–∞ —Å–ø–∞–Ω –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è
    const originalEnd = span.end.bind(span);
    span.end = function (endTime?: any) {
        console.log('üîç OTel: Span ending:', name, span.spanContext());
        return originalEnd(endTime);
    };

    return span;
};

export { otelTracer, context, propagation, trace, provider };


